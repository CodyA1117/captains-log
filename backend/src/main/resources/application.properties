spring.application.name=captainslogapp

# ==== Database Connection ====
spring.datasource.url=jdbc:postgresql://localhost:5432/captainslogdb
spring.datasource.username=postgres
spring.datasource.password=10Big0/3B3@n9648P!

# ==== JPA / Hibernate ====
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# ==== Server Port (optional) ====
# server.port=8080

# Oura API credentials
oura.client.id=3ZUORUXHFYWX3JXS
oura.client.secret=PJNS2U4VOGQJILOSKP372EMHM26FM7JR
oura.redirect.uri=http://localhost:3000/oura-success
oura.auth.uri=https://cloud.ouraring.com/oauth/authorize
oura.token.uri=https://api.ouraring.com/oauth/token
oura.api.base.url=https://api.ouraring.com/v2

nutritionix.app.id=e7865b98
nutritionix.app.key=02de2672908163e5c70b9b9b93153b36


logging.level.org.springframework.web=DEBUG
logging.level.com.minderall=DEBUG

# JWT Configuration
captainslogapp.app.jwtSecret=ohg/JyjGLx6JtuFP06WSFAHJGl+L126g4EeeWxUB0GIz/HYeMDM86NoO/E/E+CuQ

captainslogapp.app.jwtExpirationMs=86400000 # 24 hours

# ==== Spring Security OAuth2 Client Configuration for Oura ====
spring.security.oauth2.client.registration.oura.client-id=${oura.client.id}
spring.security.oauth2.client.registration.oura.client-secret=${oura.client.secret}
spring.security.oauth2.client.registration.oura.authorization-grant-type=authorization_code
spring.security.oauth2.client.registration.oura.redirect-uri={baseUrl}/login/oauth2/code/{registrationId} # Standard Spring pattern
# spring.security.oauth2.client.registration.oura.redirect-uri=http://localhost:8080/login/oauth2/code/oura # Or be explicit if needed
spring.security.oauth2.client.registration.oura.scope=personal,daily # Add scopes required by Oura (e.g., email, personal, daily, heartrate, workout) - CHECK OURA DOCS!

spring.security.oauth2.client.provider.oura.authorization-uri=${oura.auth.uri}
spring.security.oauth2.client.provider.oura.token-uri=${oura.token.uri}
spring.security.oauth2.client.provider.oura.user-info-uri=${oura.api.base.url}/usercollection/personal_info # Example, Oura might not have a standard user-info-uri, we might fetch user data separately
spring.security.oauth2.client.provider.oura.user-name-attribute=email # Or another unique identifier from Oura's user info response, if applicable. This might not be used directly if we map manually.